mutate(name = case_when(
name == 'C' ~ 'Consumption',
name == 'G' ~ 'Gvt. Expenditures',
name == 'H' ~ str_c('\u0394', ' Monetary balances'),
name == 'WB' ~ 'Wage Bills',
name == 'TX' ~ 'Taxes',
str_detect(name, 'pr') ~ 'Firms',
str_detect(name, 'gvt') ~ 'Government',
T ~ 'Households'
))
sn <- networkD3::sankeyNetwork(Links = as.data.frame(links_sim), Nodes = as.data.frame(sim_nodes1),
Source = 'source',
Target = 'target',
Value = 'value',
NodeID = 'name',
units = 'dollars',
fontSize = 14)
htmlwidgets::onRender(sn, 'function(el) { el.querySelector("svg").removeAttribute("viewBox") }')
sn
serve_site()
sn
serve_site()
library(sfcr)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(PKSFC)
rm(list=ls(all=T))
source("~/tmp/GodleyLavoieR(1)/chapter 5/sfc3.0.R")
lp=sfc.model("~/tmp/GodleyLavoieR(1)/chapter 5/ch5.txt",modelName="lp")
lp<-sfc.check(lp,fill=T)
lp
#simulates the model
datalp<-simulate(lp, maxIter=100)
#create 2 shocks in the model,a; an increase in short-term interest rate, b; a decrease in longterm interes rate.
init = datalp$baseline[66,]
init
blogdown::serve_site()
install.packages("blogdown")
install.packages("blogdown")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
library(tidyverse)
library(sfcr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
paged.print = F
)
bs_pc <- sfcr_matrix(
columns = c("Households", "Firms", "Government", "Central bank", "sum"),
codes = c("h", "f", "g", "cb", "s"),
r1 = c("Money", h = "+Hh", cb = "-Hs"),
r2 = c("Bills", h = "+Bh", g = "-Bs", cb = "+Bcb"),
r3 = c("Balance", h = "-V", g = "+V")
)
sfcr_matrix_display(bs_pc, "bs")
tfm_pc <- sfcr_matrix(
columns = c("Households", "Firms", "Government", "CB current", "CB capital"),
codes = c("h", "f", "g", "cbc", "cbk"),
c("Consumption", h = "-C", f = "+C"),
c("Govt. Expenditures", f = "+G", g = "-G"),
c("Income", h = "+Y", f = "-Y"),
c("Int. payments", h = "+r[-1] * Bh[-1]", g = "-r[-1] * Bs[-1]", cbc = "+r[-1] * Bcb[-1]"),
c("CB profits", g = "+r[-1] * Bcb[-1]", cbc = "-r[-1] * Bcb[-1]"),
c("Taxes", h = "-TX", g = "+TX"),
c("Ch. Money", h = "-(Hh - Hh[-1])", cbk = "+(Hs - Hs[-1])"),
c("Ch. Bills", h = "-(Bh - Bh[-1])", g = "+(Bs - Bs[-1])", cbk = "-(Bcb - Bcb[-1])")
)
sfcr_matrix_display(tfm_pc)
pc_eqs <- sfcr_set(
Y ~ C + G,
YD ~ Y - TX + r[-1] * Bh[-1],
TX ~ theta * (Y + r[-1] * Bh[-1]),
V ~ V[-1] + (YD - C),
C ~ alpha1 * YD + alpha2 * V[-1],
Hh ~ V - Bh,
Hh1 ~ V * ((1 - lambda0) - lambda1 * r + lambda2 * ( YD/V )), # EQ 4.6A
Bh ~ V * (lambda0 + lambda1 * r - lambda2 * ( YD/V )),
Bs ~ Bs[-1] + (G + r[-1] * Bs[-1]) - (TX + r[-1] * Bcb[-1]),
Hs ~ Hs[-1] + Bcb - Bcb[-1],
Bcb ~ Bs - Bh
)
pc_ext <- sfcr_set(
# Exogenous
r ~ 0.025,
G ~ 20,
# Parameters
alpha1 ~ 0.6,
alpha2 ~ 0.4,
theta ~ 0.2,
lambda0 ~ 0.635,
lambda1 ~ 0.05,
lambda2 ~ 0.01
)
pc <- sfcr_baseline(
equations = pc_eqs,
external = pc_ext,
periods = 70,
hidden = c("Hh" = "Hs")
)
sfcr_validate(bs_pc, pc, "bs")
sfcr_validate(tfm_pc, pc, "tfm")
all.equal(pc$Hh, pc$Hh1)
sfcr_dag_cycles_plot(pc_eqs)
sfcr_dag_blocks_plot(pc_eqs)
sfcr_sankey(tfm_pc, pc)
shock1 <- sfcr_shock(
variables = sfcr_set(
r ~ 0.035
),
start = 5,
end = 60
)
pc2 <- sfcr_scenario(pc, scenario = shock1, periods = 60)
pc2 <- pc2 %>%
mutate(BV = Bh / V,
MV = Hh / V)
# If the read prefers to stick with base R functions, uncomment the following lines:
# pc2$BV <- pc2$B_h / pc2$V
# pc2$MV <- pc2$H_h / pc2$V
pc2_long <- pc2 %>%
pivot_longer(cols = -period)
pc2_long %>%
filter(name %in% c("BV", "MV")) %>%
ggplot(aes(x = period, y = value)) +
geom_line() +
facet_wrap(~ name, scales = 'free_y') +
labs(title = "Wealth alocation")
pc2_long %>%
filter(name %in% c("YD", "C")) %>%
ggplot(aes(x = period, y = value)) +
geom_line(aes(linetype = name)) +
labs(title = "Evolution of disposable income and household consumption",
subtitle = "Following an increase of 100 points in the rate of interest")
values <- seq(0.61, 0.8, 0.01)
alpha1Exp <- sfcr_expand(x = pc_ext, variable = alpha1, values = values)
#
pc_multi_bl <- sfcr_multis(alpha1Exp, pc_eqs, periods = 50)
shock1 <- sfcr_shock(
variables = sfcr_set(
r ~ 0.035
),
start = 5,
end = 50
)
pc_multi_scn <- sfcr_multis(pc_multi_bl, shock1, periods = 50)
# We also need to expand the color palettes
colourCount <- 20 # number of levels
getPalette <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(6, "GnBu")[c(3:6)])
bind_rows(pc_multi_scn) %>%
mutate(simulation = as_factor(simulation)) %>%
pivot_longer(cols = -c(period, simulation)) %>%
filter(name %in% c("Y", "YD", "C")) %>%
ggplot(aes(x = period, y = value, color = simulation)) +
geom_line() +
theme(legend.position = "bottom") +
scale_color_manual("alpha10",
values = getPalette(20),
labels = as.character(values)) +
facet_wrap(~ name, scales = 'free_y')
blogdown::serve_site()
blogdown::stop_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::server_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
import numpy as np
quit
reticulate::repl_python()
df_orders = pd.read_csv('Datasets/olist_orders_dataset.csv')
df_order_items = pd.read_csv('Datasets/olist_order_items_dataset.csv')
df_sellers = pd.read_csv('Datasets/olist_sellers_dataset.csv')
quit
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
quit
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
quit
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
quit
reticulate::repl_python()
df_orders = pd.read_csv('Datasets/olist_orders_dataset.csv')
df_order_items = pd.read_csv('Datasets/olist_order_items_dataset.csv')
df_sellers = pd.read_csv('Datasets/olist_sellers_dataset.csv')
quit
reticulate::repl_python()
df = pd.merge(df_order_items, df_orders, on='order_id')
df = pd.merge(df, df_sellers, on='seller_id')
df = (df
.assign(date = lambda x: pd.to_datetime(x.order_purchase_timestamp))
.query('date >= "2017-01-01" & date < "2018-09-01"')
.loc[:, ['seller_id', 'date']]
)
df.head(3)
quit
reticulate::repl_python()
seller_cohort = (df[['seller_id', 'date']]
.assign(cohort = lambda x: x.date.dt.to_period('M'))
.sort_values('date')
.drop_duplicates('seller_id')
.reset_index()
.loc[:, ['seller_id', 'cohort']]
)
seller_cohort.head(3)
quit
reticulate::repl_python()
from operator import attrgetter
cohort_df = (
pd.merge(df, seller_cohort, on='seller_id')
.assign(date_of_sale = lambda x: x.date.dt.to_period('M'),
delta = lambda x: (x.date_of_sale - x.cohort).apply(attrgetter('n')))
.loc[:, ['seller_id', 'date', 'cohort', 'date_of_sale', 'delta']]
)
cohort_df.head(3)
quit
reticulate::repl_python()
size_cohorts = (cohort_df
.groupby(['cohort', 'delta'])[['seller_id']]
.nunique()
.query('delta == 0')
.reset_index()
)
# Plot:
sns.set(style="whitegrid", color_codes=True)
pal = sns.color_palette("Greens_d", len(size_cohorts))
rank = size_cohorts.seller_id.argsort().argsort()
plt.figure(figsize=(8, 6))
ax = sns.barplot(
data=size_cohorts,
y='seller_id',
x='cohort',
palette=np.array(pal)[rank]
)
ax.set(xlabel='Cohort', ylabel='# of sellers')
plt.xticks(rotation=45);
quit
reticulate::repl_python()
size_cohorts = (cohort_df
.groupby(['cohort', 'delta'])[['seller_id']]
.nunique()
.query('delta == 0')
.reset_index()
)
# Plot:
sns.set(style="whitegrid", color_codes=True)
pal = sns.color_palette("Greens_d", len(size_cohorts))
rank = size_cohorts.seller_id.argsort().argsort()
plt.figure(figsize=(8, 6))
ax = sns.barplot(
data=size_cohorts,
y='seller_id',
x='cohort',
palette=np.array(pal)[rank]
)
ax.set(xlabel='Cohort', ylabel='# of sellers')
plt.xticks(rotation=45)
plt.show();
quit
reticulate::repl_python()
size_cohorts = (cohort_df
.groupby(['cohort', 'delta'])[['seller_id']]
.nunique()
.query('delta == 0')
.reset_index()
)
# Plot:
sns.set(style="whitegrid", color_codes=True)
pal = sns.color_palette("Greens_d", len(size_cohorts))
rank = size_cohorts.seller_id.argsort().argsort()
plt.figure(figsize=(8, 6))
ax = sns.barplot(
data=size_cohorts,
y='seller_id',
x='cohort',
palette=np.array(pal)[rank]
)
ax.set(xlabel='Cohort', ylabel='# of sellers')
plt.xticks(rotation=45);
plt.show()
quit
reticulate::repl_python()
size_cohorts = (cohort_df
.groupby(['cohort', 'delta'])[['seller_id']]
.nunique()
.query('delta == 0')
.reset_index()
)
# Plot:
sns.set(style="whitegrid", color_codes=True)
pal = sns.color_palette("Greens_d", len(size_cohorts))
rank = size_cohorts.seller_id.argsort().argsort()
# plt.figure(figsize=(8, 6))
ax = sns.barplot(
data=size_cohorts,
y='seller_id',
x='cohort',
palette=np.array(pal)[rank]
)
ax.set(xlabel='Cohort', ylabel='# of sellers')
plt.xticks(rotation=45);
plt.show()
quit
reticulate::repl_python()
cohort_df = (cohort_df
.groupby(['cohort', 'delta'])[['seller_id']]
.nunique()
.assign(total = lambda x: x.groupby('cohort')[['seller_id']]
.transform(lambda x: x[0]),
proportion = lambda x: 100 * x.seller_id / x.total)
.reset_index()
.loc[:, ['cohort', 'delta', 'proportion']]
)
cohort_df.head(3)
quit
reticulate::repl_python()
cohort_pivot = (
cohort_df[['cohort', 'delta', 'proportion']]
.pivot(columns='delta', index='cohort')['proportion']
)
cohort_pivot
quit
reticulate::repl_python()
sns.heatmap(
cohort_pivot,
cmap='crest',
annot=True,
fmt='.0f'
).set_title("Olist Cohort Analysis")
quit
reticulate::repl_python()
sns.heatmap(
cohort_pivot,
cmap='crest',
annot=True,
fmt='.0f'
).set_title("Olist Cohort Analysis")
plt.show()
quit
reticulate::repl_python()
g =sns.heatmap(
cohort_pivot,
cmap='crest',
annot=True,
fmt='.0f'
).set_title("Olist Cohort Analysis")
g.show()
quit
reticulate::repl_python()
g = sns.heatmap(
cohort_pivot,
cmap='crest',
annot=True,
fmt='.0f'
).set_title("Olist Cohort Analysis")
g
quit
reticulate::repl_python()
sns.heatmap(
cohort_pivot,
cmap='crest',
annot=True,
fmt='.0f'
).set_title("Olist Cohort Analysis")
plt.show()
quit
reticulate::repl_python()
size_cohorts = (cohort_df
.groupby(['cohort', 'delta'])[['seller_id']]
.nunique()
.query('delta == 0')
.reset_index()
)
# Plot:
sns.set(style="whitegrid", color_codes=True)
pal = sns.color_palette("Greens_d", len(size_cohorts))
rank = size_cohorts.seller_id.argsort().argsort()
# plt.figure(figsize=(8, 6))
ax = sns.barplot(
data=size_cohorts,
y='seller_id',
x='cohort',
palette=np.array(pal)[rank]
)
ax.set(xlabel='Cohort', ylabel='# of sellers')
plt.xticks(rotation=45);
plt.show()
plt.close()
quit
reticulate::repl_python()
size_cohorts = (cohort_df
.groupby(['cohort', 'delta'])[['seller_id']]
.nunique()
.query('delta == 0')
.reset_index()
)
# Plot:
sns.set(style="whitegrid", color_codes=True)
pal = sns.color_palette("Greens_d", len(size_cohorts))
rank = size_cohorts.seller_id.argsort().argsort()
# plt.figure(figsize=(8, 6))
ax = sns.barplot(
data=size_cohorts,
y='seller_id',
x='cohort',
palette=np.array(pal)[rank]
)
ax.set(xlabel='Cohort', ylabel='# of sellers')
plt.xticks(rotation=45);
plt.show()
quit
reticulate::repl_python()
size_cohorts = (cohort_df
.groupby(['cohort', 'delta'])[['seller_id']]
.nunique()
.query('delta == 0')
.reset_index()
)
# Plot:
sns.set(style="whitegrid", color_codes=True)
pal = sns.color_palette("Greens_d", len(size_cohorts))
rank = size_cohorts.seller_id.argsort().argsort()
# plt.figure(figsize=(8, 6))
ax = sns.barplot(
data=size_cohorts,
y='seller_id',
x='cohort',
palette=np.array(pal)[rank]
)
ax.set(xlabel='Cohort', ylabel='# of sellers')
plt.xticks(rotation=45);
plt.show()
quit
reticulate::repl_python()
size_cohorts = (cohort_df
.groupby(['cohort', 'delta'])[['seller_id']]
.nunique()
.query('delta == 0')
.reset_index()
)
# Plot:
sns.set(style="whitegrid", color_codes=True)
pal = sns.color_palette("Greens_d", len(size_cohorts))
rank = size_cohorts.seller_id.argsort().argsort()
# plt.figure(figsize=(8, 6))
ax = sns.barplot(
data=size_cohorts,
y='seller_id',
x='cohort',
palette=np.array(pal)[rank]
)
ax.set(xlabel='Cohort', ylabel='# of sellers')
plt.xticks(rotation=45);
plt.tight_layout();
plt.show()
quit
1 + 1
1 + 1
1 + 1
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::new_post(title = "cohort",
ext = '.Rmarkdown',
subdir = "post")
